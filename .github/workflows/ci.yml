name: CI/CD Pipeline Landing Page

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Permite acionar manualmente

jobs:
  # Job 1: Rodar os testes
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependências
        run: npm install

      - name: Rodar testes
        run: npm test

  # Job 2: Construir e publicar a imagem Docker
  build-and-push:
    runs-on: ubuntu-latest
    needs: test # <<< SÓ RODA SE O JOB 'test' PASSAR
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/landingpage:1.0.${{ github.run_number }} # Versiona com o hash do commit

  # Job 3: Fazer o deploy no Google Cloud (GCP)
  deploy-to-vercel:
      runs-on: ubuntu-latest
      needs: build-and-push # Só roda depois que a imagem for criada
      
      environment:
        name: production
        url: https://${{ steps.get_url.outputs.project_name }}.vercel.app

      steps:
        # NÃO FAZEMOS CHECKOUT DO CÓDIGO AQUI!

        - name: Checkout código
          uses: actions/checkout@v4

        - name: Login no Docker Hub (para poder puxar a imagem)
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Puxar a imagem Docker da etapa de build
          run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/landingpage:1.0.${{ github.run_number }}

        - name: Extrair conteúdo do site da imagem Docker
          run: |
            mkdir ./site-content
            docker create --name temp_container ${{ secrets.DOCKERHUB_USERNAME }}/landingpage:1.0.${{ github.run_number }}
            docker cp temp_container:/usr/share/nginx/html/. ./site-content
            docker rm temp_container

        - name: Instalar Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Terraform Init
          run: terraform -chdir=infra init

        - name: Terraform Apply (Deploy para Vercel)
          env:
            VERCEL_API_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          run: terraform -chdir=infra apply -auto-approve

        - name: Obter Nome do Projeto para a URL
          id: get_url
          run: |
            PROJECT_NAME=$(terraform -chdir=infra output -raw website_url | sed 's|https://\(.*\)\.vercel\.app|\1|')
            echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT